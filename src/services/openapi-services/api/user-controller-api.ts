/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Content } from '../models';
// @ts-ignore
import type { FavoriteRequestDTO } from '../models';
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} userId 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoritesByUserId: async (userId: number, filter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFavoritesByUserId', 'userId', userId)
            const localVarPath = `/periodicos-capes/v1/user/{userId}/favorites`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FavoriteRequestDTO} favoriteRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFavorited: async (favoriteRequestDTO: FavoriteRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'favoriteRequestDTO' is not null or undefined
            assertParamExists('putFavorited', 'favoriteRequestDTO', favoriteRequestDTO)
            const localVarPath = `/periodicos-capes/v1/user/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(favoriteRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFavorite: async (userId: number, contentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeFavorite', 'userId', userId)
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('removeFavorite', 'contentId', contentId)
            const localVarPath = `/periodicos-capes/v1/user/favorites/{userId}/{contentId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} userId 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavoritesByUserId(userId: number, filter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Content>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavoritesByUserId(userId, filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getFavoritesByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FavoriteRequestDTO} favoriteRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFavorited(favoriteRequestDTO: FavoriteRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFavorited(favoriteRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.putFavorited']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} contentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFavorite(userId: number, contentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFavorite(userId, contentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.removeFavorite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UserControllerApiGetFavoritesByUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavoritesByUserId(requestParameters: UserControllerApiGetFavoritesByUserIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Content>> {
            return localVarFp.getFavoritesByUserId(requestParameters.userId, requestParameters.filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserControllerApiPutFavoritedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFavorited(requestParameters: UserControllerApiPutFavoritedRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putFavorited(requestParameters.favoriteRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserControllerApiRemoveFavoriteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFavorite(requestParameters: UserControllerApiRemoveFavoriteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFavorite(requestParameters.userId, requestParameters.contentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFavoritesByUserId operation in UserControllerApi.
 * @export
 * @interface UserControllerApiGetFavoritesByUserIdRequest
 */
export interface UserControllerApiGetFavoritesByUserIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UserControllerApiGetFavoritesByUserId
     */
    readonly userId: number

    /**
     * 
     * @type {string}
     * @memberof UserControllerApiGetFavoritesByUserId
     */
    readonly filter?: string
}

/**
 * Request parameters for putFavorited operation in UserControllerApi.
 * @export
 * @interface UserControllerApiPutFavoritedRequest
 */
export interface UserControllerApiPutFavoritedRequest {
    /**
     * 
     * @type {FavoriteRequestDTO}
     * @memberof UserControllerApiPutFavorited
     */
    readonly favoriteRequestDTO: FavoriteRequestDTO
}

/**
 * Request parameters for removeFavorite operation in UserControllerApi.
 * @export
 * @interface UserControllerApiRemoveFavoriteRequest
 */
export interface UserControllerApiRemoveFavoriteRequest {
    /**
     * 
     * @type {number}
     * @memberof UserControllerApiRemoveFavorite
     */
    readonly userId: number

    /**
     * 
     * @type {number}
     * @memberof UserControllerApiRemoveFavorite
     */
    readonly contentId: number
}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {UserControllerApiGetFavoritesByUserIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getFavoritesByUserId(requestParameters: UserControllerApiGetFavoritesByUserIdRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getFavoritesByUserId(requestParameters.userId, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserControllerApiPutFavoritedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public putFavorited(requestParameters: UserControllerApiPutFavoritedRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).putFavorited(requestParameters.favoriteRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserControllerApiRemoveFavoriteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public removeFavorite(requestParameters: UserControllerApiRemoveFavoriteRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).removeFavorite(requestParameters.userId, requestParameters.contentId, options).then((request) => request(this.axios, this.basePath));
    }
}

